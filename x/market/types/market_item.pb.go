// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: market/market_item.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MarketItem struct {
	Id     uint64                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemID string                                   `protobuf:"bytes,2,opt,name=itemID,proto3" json:"itemID,omitempty"`
	Price  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price"`
	Owner  string                                   `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MarketItem) Reset()         { *m = MarketItem{} }
func (m *MarketItem) String() string { return proto.CompactTextString(m) }
func (*MarketItem) ProtoMessage()    {}
func (*MarketItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_53ffab6d8dfac2bb, []int{0}
}
func (m *MarketItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketItem.Merge(m, src)
}
func (m *MarketItem) XXX_Size() int {
	return m.Size()
}
func (m *MarketItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketItem.DiscardUnknown(m)
}

var xxx_messageInfo_MarketItem proto.InternalMessageInfo

func (m *MarketItem) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MarketItem) GetItemID() string {
	if m != nil {
		return m.ItemID
	}
	return ""
}

func (m *MarketItem) GetPrice() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *MarketItem) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterType((*MarketItem)(nil), "harish551.cosmostore.market.MarketItem")
}

func init() { proto.RegisterFile("market/market_item.proto", fileDescriptor_53ffab6d8dfac2bb) }

var fileDescriptor_53ffab6d8dfac2bb = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbd, 0x4a, 0xc4, 0x40,
	0x10, 0x80, 0xb3, 0xb9, 0x1f, 0x70, 0x05, 0x8b, 0x70, 0x48, 0x3c, 0x61, 0x2f, 0x58, 0xa5, 0x71,
	0xd7, 0x28, 0xf7, 0x02, 0xa7, 0x85, 0x57, 0xd8, 0xa4, 0xb4, 0x91, 0xfc, 0x2c, 0xc9, 0x72, 0x24,
	0x13, 0x76, 0xd7, 0xbf, 0xb7, 0xf0, 0x39, 0x04, 0xdf, 0xe3, 0xca, 0x2b, 0xad, 0x54, 0x92, 0x17,
	0x91, 0x64, 0x17, 0xbd, 0x6a, 0x7e, 0x98, 0x99, 0x6f, 0xf8, 0xb0, 0x5f, 0x25, 0x72, 0xc3, 0x35,
	0x33, 0xe1, 0x41, 0x68, 0x5e, 0xd1, 0x46, 0x82, 0x06, 0xef, 0xb4, 0x4c, 0xa4, 0x50, 0xe5, 0x72,
	0x19, 0xd1, 0x0c, 0x54, 0x05, 0x4a, 0x83, 0xe4, 0xd4, 0xcc, 0xcd, 0x89, 0x69, 0xb1, 0x34, 0x51,
	0x9c, 0x3d, 0x45, 0x29, 0xd7, 0x49, 0xc4, 0x32, 0x10, 0xb5, 0x59, 0x9e, 0xcf, 0x0a, 0x28, 0x60,
	0x48, 0x59, 0x9f, 0x99, 0xee, 0xd9, 0x07, 0xc2, 0xf8, 0x6e, 0x38, 0xb0, 0xd6, 0xbc, 0xf2, 0x8e,
	0xb0, 0x2b, 0x72, 0x1f, 0x05, 0x28, 0x1c, 0xc7, 0xae, 0xc8, 0xbd, 0x63, 0x3c, 0xed, 0xf9, 0xeb,
	0x1b, 0xdf, 0x0d, 0x50, 0x78, 0x10, 0xdb, 0xca, 0x4b, 0xf0, 0xa4, 0x91, 0x22, 0xe3, 0xfe, 0x28,
	0x18, 0x85, 0x87, 0x97, 0x27, 0xf6, 0x1f, 0xda, 0xc3, 0xa9, 0x85, 0xd3, 0x6b, 0x10, 0xf5, 0xea,
	0x62, 0xfb, 0xb5, 0x70, 0xde, 0xbf, 0x17, 0x61, 0x21, 0x74, 0xf9, 0x98, 0xd2, 0x0c, 0x2a, 0x66,
	0x3f, 0x35, 0xe1, 0x5c, 0xe5, 0x1b, 0xa6, 0x5f, 0x1b, 0xae, 0x86, 0x05, 0x15, 0x9b, 0xcb, 0xde,
	0x0c, 0x4f, 0xe0, 0xb9, 0xe6, 0xd2, 0x1f, 0x0f, 0x64, 0x53, 0xac, 0x6e, 0xb7, 0x2d, 0x41, 0xbb,
	0x96, 0xa0, 0x9f, 0x96, 0xa0, 0xb7, 0x8e, 0x38, 0xbb, 0x8e, 0x38, 0x9f, 0x1d, 0x71, 0xee, 0xe9,
	0x1e, 0xe0, 0xcf, 0x13, 0xfb, 0xf7, 0xc4, 0x5e, 0xac, 0x51, 0x03, 0x4b, 0xa7, 0x83, 0x80, 0xab,
	0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x6c, 0x32, 0x77, 0x6f, 0x01, 0x00, 0x00,
}

func (m *MarketItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMarketItem(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMarketItem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ItemID) > 0 {
		i -= len(m.ItemID)
		copy(dAtA[i:], m.ItemID)
		i = encodeVarintMarketItem(dAtA, i, uint64(len(m.ItemID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMarketItem(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMarketItem(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarketItem(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MarketItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMarketItem(uint64(m.Id))
	}
	l = len(m.ItemID)
	if l > 0 {
		n += 1 + l + sovMarketItem(uint64(l))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovMarketItem(uint64(l))
		}
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMarketItem(uint64(l))
	}
	return n
}

func sovMarketItem(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarketItem(x uint64) (n int) {
	return sovMarketItem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MarketItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarketItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarketItem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarketItem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarketItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarketItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarketItem
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarketItem
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarketItem
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarketItem        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarketItem          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarketItem = fmt.Errorf("proto: unexpected end of group")
)
